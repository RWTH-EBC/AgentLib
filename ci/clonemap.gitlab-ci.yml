stages:
  - start_cloneMAP
  - test_cloneMAP
  - tearDown_cloneMAP

# Global variables
variables:
  IP_ADRESS: 192.168.1.24  # Use local ip
  TIMEOUT_cloneMAP: 10  # Number of seconds to wait for cloneMAP to start.


.image_template: &image_template
  image: docker:latest

.except_template: &except_template
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-all-tests/
      - $CI_COMMIT_MESSAGE =~ /skip-clonemap-tests/

.before_script_template: &before_script_template
  before_script:
    - apk add curl
    - apk add bash

.test_template: &test_template
  <<: *image_template
  stage: test_cloneMAP
  <<: *before_script_template
  script:
    # Remove all previous containers building on $TESTIMAGE_NAME image
    - containers=$(docker ps -a -q  --filter ancestor=$TESTIMAGE_NAME)
    - docker stop $containers && docker container rm $containers
    - docker build -f $DOCKERFILE -t $TESTIMAGE_NAME .
    - curl -X POST -H "Content-Type:application/json" -d @$JSON_CONFIG $IP_ADRESS:30009/api/clonemap/mas
    - sleep $RUNTIME
    # Now get all containers building onto $TESTIMAGE_NAME image
    - runningcontainers=$(docker ps -q --filter ancestor=$TESTIMAGE_NAME)
    - allcontainers=$(docker ps -aq --filter ancestor=$TESTIMAGE_NAME)
    - docker ps --filter ancestor=$TESTIMAGE_NAME
    - docker ps -a --filter ancestor=$TESTIMAGE_NAME
    - docker logs mas-0-im-0-agency-1.mas0agencies
    - docker logs mas-0-im-0-agency-0.mas0agencies
    # Check if those containers are still running. If not, exit
    - if [ "$runningcontainers" != "$allcontainers" ];
      then echo "One or more containers failed, stopping:" && curl -X DELETE $IP_ADRESS:30009/api/clonemap/mas/0 && exit 1;
      fi;
    # If still there, remove MAS anyways
    - curl -X DELETE $IP_ADRESS:30009/api/clonemap/mas/0
  <<: *except_template

# Job to start the cloneMAP
start_MAP:
  <<: *image_template
  stage: start_cloneMAP
  <<: *before_script_template
  script:
    # Remove kubestub container if already in use
    - docker ps -a | grep "kubestub" && docker stop kubestub && docker container rm kubestub
    # Start cloneMap (Detached, use 8001 as 8000 is already in use of gitlab-runner)
    - docker run -d -p 8001:8000 -v /var/run/docker.sock:/var/run/docker.sock -e CLONEMAP_START_MODULES=true -e CLONEMAP_MODULE_MQTT=true -e CLONEMAP_MODULE_FRONTEND=true -e CLONEMAP_LOG_LEVEL=info --name=kubestub registry.git.rwth-aachen.de/acs/public/cloud/mas/clonemap/clonemap_local
    # Wait for cloneMAP to be ready
    - x=0 # Init timer variable
    - while ! docker logs kubestub | grep -q "Ready" && [ $x -le $TIMEOUT_cloneMAP ]; do echo Waiting for cloneMAP to be ready $x of $TIMEOUT_cloneMAP s && sleep 1 && x=$(( $x + 1 )); done
    - if docker logs kubestub | grep -q "Ready"; then echo "CloneMAP is ready:" $(docker logs kubestub); else echo "Timeout reached. Last log:" $(docker logs kubestub) && exit 1;fi
  <<: *except_template

tearDown_MAP:
  <<: *image_template
  stage: tearDown_cloneMAP
  <<: *before_script_template
  script:
    - docker stop kubestub && docker container rm kubestub

pingpong:
  variables:
    RUNTIME: 20  # Number of seconds the MAS is executed
    TESTIMAGE_NAME: agentlibtest
    DOCKERFILE: examples/multi-agent-systems/pingpong/Dockerfile
    JSON_CONFIG: examples/multi-agent-systems/pingpong/clonemap_config.json
  <<: *test_template
