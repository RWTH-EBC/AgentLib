************* Module /home/runner/work/AgentLib/AgentLib/pylintrc
pylintrc:1:0: R0022: Useless option value for '--disable', 'print-statement' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'parameter-unpacking' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unpacking-in-except' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'old-raise-syntax' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'backtick' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'import-star-module-level' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'apply-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'basestring-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'buffer-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'cmp-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'coerce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'execfile-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'file-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'long-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'raw_input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'reduce-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'standarderror-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unicode-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'xrange-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'coerce-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'delslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'getslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'setslice-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'no-absolute-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'old-division' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-iter-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-view-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'next-method-called' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'metaclass-assignment' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'indexing-exception' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'raising-string' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'reload-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'oct-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'hex-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'nonzero-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'cmp-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'input-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'round-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'intern-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'unichr-builtin' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'map-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'zip-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'range-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'filter-builtin-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'using-cmp-argument' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'div-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'idiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'rdiv-method' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'exception-message-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'invalid-str-codec' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'sys-max-int' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'bad-python3-import' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-string-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-str-translate-call' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-itertools-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-types-field' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'next-method-defined' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-items-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-keys-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'dict-values-not-iterating' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-operator-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-urllib-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'xreadlines-attribute' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'deprecated-sys-function' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'exception-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'comprehension-escape' was removed from pylint, see https://github.com/pylint-dev/pylint/pull/4942. (useless-option-value)
pylintrc:1:0: R0022: Useless option value for '--disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers. (useless-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'long-suffix' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'old-ne-operator' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'old-octal-literal' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'non-ascii-bytes-literal' (unknown-option-value)
pylintrc:1:0: W0012: Unknown option value for '--disable', expected a valid pylint message and got 'eq-without-hash' (unknown-option-value)
************* Module agentlib.modules.communicator.communicator
agentlib/modules/communicator/communicator.py:1:0: F0002: agentlib/modules/communicator/communicator.py: Fatal error while checking 'agentlib/modules/communicator/communicator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-30-59.txt'. (astroid-error)
************* Module agentlib.modules.simulation.simulator
agentlib/modules/simulation/simulator.py:1:0: F0002: agentlib/modules/simulation/simulator.py: Fatal error while checking 'agentlib/modules/simulation/simulator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-30-59.txt'. (astroid-error)
************* Module scipy_example
examples/models/scipy/scipy_example.py:4:0: C0301: Line too long (114/100) (line-too-long)
examples/models/scipy/scipy_example.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/models/scipy/scipy_example.py:9:0: C0103: Constant name "C_p" doesn't conform to UPPER_CASE naming style (invalid-name)
examples/models/scipy/scipy_example.py:43:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/models/scipy/scipy_example.py:53:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/models/scipy/scipy_example.py:53:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
************* Module examples.multi-agent-systems.pingpong.pingpong_mqtt
examples/multi-agent-systems/pingpong/pingpong_mqtt.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module examples.multi-agent-systems.pingpong.pingpong_local
examples/multi-agent-systems/pingpong/pingpong_local.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module examples.multi-agent-systems.pingpong.pingpong_module
examples/multi-agent-systems/pingpong/pingpong_module.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/multi-agent-systems/pingpong/pingpong_module.py:4:0: E0401: Unable to import 'pydantic' (import-error)
examples/multi-agent-systems/pingpong/pingpong_module.py:11:0: C0115: Missing class docstring (missing-class-docstring)
examples/multi-agent-systems/pingpong/pingpong_module.py:20:0: C0115: Missing class docstring (missing-class-docstring)
************* Module examples.multi-agent-systems.pingpong.pingpong_clonemap
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:29:0: C0301: Line too long (266/100) (line-too-long)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:37:0: C0301: Line too long (234/100) (line-too-long)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:6:17: W1401: Anomalous backslash in string: '\e'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:6:26: W1401: Anomalous backslash in string: '\m'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:6:46: W1401: Anomalous backslash in string: '\p'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:6:55: W1401: Anomalous backslash in string: '\D'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:11:0: E0401: Unable to import 'requests' (import-error)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:16:4: R0402: Use 'from clonemapy import ams' instead (consider-using-from-import)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:16:4: E0401: Unable to import 'clonemapy.ams' (import-error)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:20:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
examples/multi-agent-systems/pingpong/pingpong_clonemap.py:12:0: C0411: standard import "from pathlib import Path" should be placed before "import requests" (wrong-import-order)
************* Module room_mas
examples/multi-agent-systems/room_mas/room_mas.py:11:0: C0301: Line too long (110/100) (line-too-long)
examples/multi-agent-systems/room_mas/room_mas.py:91:28: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/room_mas/room_mas.py:91:41: W1401: Anomalous backslash in string: '\,'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/multi-agent-systems/room_mas/room_mas.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/multi-agent-systems/room_mas/room_mas.py:4:0: E0401: Unable to import 'matplotlib.ticker' (import-error)
examples/multi-agent-systems/room_mas/room_mas.py:11:0: R0914: Too many local variables (16/15) (too-many-locals)
examples/multi-agent-systems/room_mas/room_mas.py:65:4: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/multi-agent-systems/room_mas/room_mas.py:65:4: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/multi-agent-systems/room_mas/room_mas.py:98:8: C0103: Variable name "ax" doesn't conform to snake_case naming style (invalid-name)
examples/multi-agent-systems/room_mas/room_mas.py:67:4: W0612: Unused variable 'fig' (unused-variable)
************* Module part_1_my_first_agent_with_comments
examples/getting-started/part_1_my_first_agent_with_comments.py:18:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_1_my_first_agent_with_comments.py:23:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_1_my_first_agent_with_comments.py:32:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
examples/getting-started/part_1_my_first_agent_with_comments.py:70:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/getting-started/part_1_my_first_agent_with_comments.py:87:4: E1101: Instance of 'Environment' has no 'run' member (no-member)
examples/getting-started/part_1_my_first_agent_with_comments.py:84:4: W0612: Unused variable 'agent' (unused-variable)
************* Module part_1_my_first_agent_concise
examples/getting-started/part_1_my_first_agent_concise.py:17:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_1_my_first_agent_concise.py:22:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_1_my_first_agent_concise.py:27:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
examples/getting-started/part_1_my_first_agent_concise.py:45:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/getting-started/part_1_my_first_agent_concise.py:50:4: E1101: Instance of 'Environment' has no 'run' member (no-member)
examples/getting-started/part_1_my_first_agent_concise.py:49:4: W0612: Unused variable 'agent' (unused-variable)
************* Module part_4_communicators_with_comments
examples/getting-started/part_4_communicators_with_comments.py:1:0: F0002: examples/getting-started/part_4_communicators_with_comments.py: Fatal error while checking 'examples/getting-started/part_4_communicators_with_comments.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-00.txt'. (astroid-error)
************* Module part_3_using_models_with_comments
examples/getting-started/part_3_using_models_with_comments.py:147:0: C0301: Line too long (117/100) (line-too-long)
examples/getting-started/part_3_using_models_with_comments.py:1:0: F0002: examples/getting-started/part_3_using_models_with_comments.py: Fatal error while checking 'examples/getting-started/part_3_using_models_with_comments.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-00.txt'. (astroid-error)
************* Module part_2_agentvariables_with_comments
examples/getting-started/part_2_agentvariables_with_comments.py:44:0: C0301: Line too long (106/100) (line-too-long)
examples/getting-started/part_2_agentvariables_with_comments.py:16:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_2_agentvariables_with_comments.py:21:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_2_agentvariables_with_comments.py:43:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
examples/getting-started/part_2_agentvariables_with_comments.py:90:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/getting-started/part_2_agentvariables_with_comments.py:96:4: E1101: Instance of 'Environment' has no 'run' member (no-member)
examples/getting-started/part_2_agentvariables_with_comments.py:99:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/getting-started/part_2_agentvariables_with_comments.py:99:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/getting-started/part_2_agentvariables_with_comments.py:100:8: C0415: Import outside toplevel (pandas) (import-outside-toplevel)
examples/getting-started/part_2_agentvariables_with_comments.py:100:8: E0401: Unable to import 'pandas' (import-error)
examples/getting-started/part_2_agentvariables_with_comments.py:121:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module part_3_using_models_concise
examples/getting-started/part_3_using_models_concise.py:1:0: F0002: examples/getting-started/part_3_using_models_concise.py: Fatal error while checking 'examples/getting-started/part_3_using_models_concise.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-00.txt'. (astroid-error)
************* Module part_2_agentvariables_concise
examples/getting-started/part_2_agentvariables_concise.py:30:0: C0301: Line too long (106/100) (line-too-long)
examples/getting-started/part_2_agentvariables_concise.py:16:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_2_agentvariables_concise.py:21:0: C0115: Missing class docstring (missing-class-docstring)
examples/getting-started/part_2_agentvariables_concise.py:29:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
examples/getting-started/part_2_agentvariables_concise.py:51:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/getting-started/part_2_agentvariables_concise.py:57:4: E1101: Instance of 'Environment' has no 'run' member (no-member)
examples/getting-started/part_2_agentvariables_concise.py:60:8: C0415: Import outside toplevel (matplotlib.pyplot) (import-outside-toplevel)
examples/getting-started/part_2_agentvariables_concise.py:60:8: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/getting-started/part_2_agentvariables_concise.py:61:8: C0415: Import outside toplevel (pandas) (import-outside-toplevel)
examples/getting-started/part_2_agentvariables_concise.py:61:8: E0401: Unable to import 'pandas' (import-error)
************* Module mqtt
examples/communicator/mqtt.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/communicator/mqtt.py:3:0: E0401: Unable to import 'numpy' (import-error)
examples/communicator/mqtt.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/communicator/mqtt.py:32:4: C0116: Missing function or method docstring (missing-function-docstring)
examples/communicator/mqtt.py:33:14: E1101: Instance of 'Environment' has no 'timeout' member (no-member)
examples/communicator/mqtt.py:38:29: E1101: Instance of 'Environment' has no 'now' member (no-member)
examples/communicator/mqtt.py:43:18: E1101: Instance of 'Environment' has no 'timeout' member (no-member)
************* Module csv_data_source
examples/simulation/csv_data_source.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/simulation/csv_data_source.py:4:0: E0401: Unable to import 'matplotlib.pyplot' (import-error)
examples/simulation/csv_data_source.py:5:0: E0401: Unable to import 'numpy' (import-error)
examples/simulation/csv_data_source.py:6:0: E0401: Unable to import 'pandas' (import-error)
examples/simulation/csv_data_source.py:11:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/simulation/csv_data_source.py:22:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/simulation/csv_data_source.py:54:4: E1101: Instance of 'Environment' has no 'run' member (no-member)
examples/simulation/csv_data_source.py:63:0: C0116: Missing function or method docstring (missing-function-docstring)
examples/simulation/csv_data_source.py:69:4: W0612: Unused variable 'fig' (unused-variable)
************* Module main
examples/plugin/main.py:24:0: C0116: Missing function or method docstring (missing-function-docstring)
************* Module my_plugin.new_module
examples/plugin/my_plugin/new_module.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/plugin/my_plugin/new_module.py:1:0: E0401: Unable to import 'pydantic' (import-error)
examples/plugin/my_plugin/new_module.py:6:0: C0115: Missing class docstring (missing-class-docstring)
examples/plugin/my_plugin/new_module.py:10:0: C0115: Missing class docstring (missing-class-docstring)
************* Module my_plugin.another_new_module
examples/plugin/my_plugin/another_new_module.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/plugin/my_plugin/another_new_module.py:1:0: E0401: Unable to import 'pydantic' (import-error)
examples/plugin/my_plugin/another_new_module.py:6:0: C0115: Missing class docstring (missing-class-docstring)
examples/plugin/my_plugin/another_new_module.py:10:0: C0115: Missing class docstring (missing-class-docstring)
************* Module examples.controller.bangbang_with_simulator
examples/controller/bangbang_with_simulator.py:103:52: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/controller/bangbang_with_simulator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
examples/controller/bangbang_with_simulator.py:1:0: F0002: examples/controller/bangbang_with_simulator.py: Fatal error while checking 'examples/controller/bangbang_with_simulator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-01.txt'. (astroid-error)
************* Module examples.controller.pid_with_simulator
examples/controller/pid_with_simulator.py:114:52: W1401: Anomalous backslash in string: '\d'. String constant might be missing an r prefix. (anomalous-backslash-in-string)
examples/controller/pid_with_simulator.py:1:0: F0002: examples/controller/pid_with_simulator.py: Fatal error while checking 'examples/controller/pid_with_simulator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-01.txt'. (astroid-error)
************* Module tools
docs/source/manual_labor/tools.py:1:0: C0114: Missing module docstring (missing-module-docstring)
docs/source/manual_labor/tools.py:1:0: E0401: Unable to import 'attrs' (import-error)
docs/source/manual_labor/tools.py:5:0: C0116: Missing function or method docstring (missing-function-docstring)
docs/source/manual_labor/tools.py:12:9: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
docs/source/manual_labor/tools.py:12:43: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
************* Module tests.test_n_pingpong
tests/test_n_pingpong.py:98:0: C0301: Line too long (118/100) (line-too-long)
tests/test_n_pingpong.py:8:0: E0401: Unable to import 'pydantic' (import-error)
tests/test_n_pingpong.py:9:0: E0401: Unable to import 'numpy' (import-error)
tests/test_n_pingpong.py:60:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_n_pingpong.py:60:4: C0103: Attribute name "n" doesn't conform to snake_case naming style (invalid-name)
tests/test_n_pingpong.py:93:8: C0103: Attribute name "n" doesn't conform to snake_case naming style (invalid-name)
tests/test_n_pingpong.py:101:8: C0103: Variable name "rt" doesn't conform to snake_case naming style (invalid-name)
tests/test_n_pingpong.py:103:34: C0103: Variable name "rt" doesn't conform to snake_case naming style (invalid-name)
tests/test_n_pingpong.py:117:8: W0612: Unused variable 'broker' (unused-variable)
tests/test_n_pingpong.py:130:59: C0103: Argument name "rt" doesn't conform to snake_case naming style (invalid-name)
************* Module tests.test_agentlogger
tests/test_agentlogger.py:173:0: C0304: Final newline missing (missing-final-newline)
tests/test_agentlogger.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_agentlogger.py:5:0: E0401: Unable to import 'numpy' (import-error)
tests/test_agentlogger.py:6:0: E0401: Unable to import 'pandas' (import-error)
tests/test_agentlogger.py:13:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_agentlogger.py:60:8: W0212: Access to a protected member _callback_values of a client class (protected-access)
tests/test_agentlogger.py:61:8: W0212: Access to a protected member _log of a client class (protected-access)
tests/test_agentlogger.py:79:8: W0212: Access to a protected member _callback_full of a client class (protected-access)
tests/test_agentlogger.py:80:8: W0212: Access to a protected member _log of a client class (protected-access)
tests/test_agentlogger.py:95:8: W0212: Access to a protected member _callback_values of a client class (protected-access)
tests/test_agentlogger.py:96:8: W0212: Access to a protected member _log of a client class (protected-access)
tests/test_agentlogger.py:111:8: W0212: Access to a protected member _callback_values of a client class (protected-access)
tests/test_agentlogger.py:112:8: W0212: Access to a protected member _log of a client class (protected-access)
tests/test_agentlogger.py:129:8: W0212: Access to a protected member _callback_values of a client class (protected-access)
tests/test_agentlogger.py:130:8: W0212: Access to a protected member _log of a client class (protected-access)
tests/test_agentlogger.py:150:12: W0212: Access to a protected member _callback_values of a client class (protected-access)
tests/test_agentlogger.py:151:8: W0212: Access to a protected member _log of a client class (protected-access)
************* Module tests.test_data_source
tests/test_data_source.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_data_source.py:5:0: E0401: Unable to import 'numpy' (import-error)
tests/test_data_source.py:6:0: E0401: Unable to import 'pandas' (import-error)
tests/test_data_source.py:15:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_data_source.py:15:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
tests/test_data_source.py:35:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:50:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:58:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:66:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:81:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:91:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:98:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:104:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:110:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:117:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_source.py:121:12: W0212: Access to a protected member _get_next_data of a client class (protected-access)
tests/test_data_source.py:122:20: W0212: Access to a protected member _get_next_data of a client class (protected-access)
************* Module tests.test_communicator
tests/test_communicator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_communicator.py:3:0: E0401: Unable to import 'pandas' (import-error)
tests/test_communicator.py:23:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_communicator.py:33:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_communicator.py:42:16: C2801: Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function. (unnecessary-dunder-call)
tests/test_communicator.py:42:50: C2801: Unnecessarily calls dunder method __getattribute__. Access attribute directly or use getattr built-in function. (unnecessary-dunder-call)
tests/test_communicator.py:1:0: F0002: tests/test_communicator.py: Fatal error while checking 'tests/test_communicator.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-01.txt'. (astroid-error)
************* Module tests.test_simulator
tests/test_simulator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_simulator.py:1:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:2:0: C0413: Import "import shutil" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:3:0: C0413: Import "import unittest" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:4:0: C0413: Import "import uuid" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:6:0: E0401: Unable to import 'numpy' (import-error)
tests/test_simulator.py:6:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:7:0: E0401: Unable to import 'pandas' (import-error)
tests/test_simulator.py:7:0: C0413: Import "import pandas as pd" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:8:0: E0401: Unable to import 'pydantic' (import-error)
tests/test_simulator.py:8:0: C0413: Import "from pydantic import ValidationError" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:10:0: C0413: Import "from agentlib.core import Agent, Environment, Model, ModelConfig, ModelOutputs, ModelOutput, ModelInput, ModelInputs, datamodels" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:21:0: C0413: Import "from agentlib.modules.simulation.simulator import Simulator" should be placed at the top of the module (wrong-import-position)
tests/test_simulator.py:60:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:94:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:101:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:103:8: W0212: Access to a protected member _callback_update_model_input of a client class (protected-access)
tests/test_simulator.py:106:8: W0212: Access to a protected member _callback_update_model_parameter of a client class (protected-access)
tests/test_simulator.py:114:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:141:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:148:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator.py:174:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
tests/test_simulator.py:1:0: C0411: standard import "import os" should be placed before "import pandas as pd" (wrong-import-order)
tests/test_simulator.py:2:0: C0411: standard import "import shutil" should be placed before "import pandas as pd" (wrong-import-order)
tests/test_simulator.py:3:0: C0411: standard import "import unittest" should be placed before "import pandas as pd" (wrong-import-order)
tests/test_simulator.py:4:0: C0411: standard import "import uuid" should be placed before "import pandas as pd" (wrong-import-order)
tests/test_simulator.py:6:0: C0411: third party import "import numpy as np" should be placed before "from agentlib import Agent, Environment, AgentVariable" (wrong-import-order)
tests/test_simulator.py:7:0: C0411: third party import "import pandas as pd" should be placed before "from agentlib import Agent, Environment, AgentVariable" (wrong-import-order)
tests/test_simulator.py:8:0: C0411: third party import "from pydantic import ValidationError" should be placed before "from agentlib import Agent, Environment, AgentVariable" (wrong-import-order)
tests/test_simulator.py:3:0: C0412: Imports from package unittest are not grouped (ungrouped-imports)
tests/test_simulator.py:7:0: C0412: Imports from package pandas are not grouped (ungrouped-imports)
tests/test_simulator.py:10:0: C0412: Imports from package agentlib are not grouped (ungrouped-imports)
************* Module tests.test_plugins
tests/test_plugins.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_plugins.py:11:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_plugins.py:13:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_plugins.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module tests.test_module
tests/test_module.py:1:0: F0002: tests/test_module.py: Fatal error while checking 'tests/test_module.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-02.txt'. (astroid-error)
************* Module tests.test_data_broker
tests/test_data_broker.py:128:0: C0301: Line too long (111/100) (line-too-long)
tests/test_data_broker.py:6:0: E0401: Unable to import 'numpy' (import-error)
tests/test_data_broker.py:33:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:34:23: W0212: Access to a protected member _variable_queue of a client class (protected-access)
tests/test_data_broker.py:35:12: W0212: Access to a protected member _execute_callbacks of a client class (protected-access)
tests/test_data_broker.py:42:29: W0212: Access to a protected member _unmapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:55:29: W0212: Access to a protected member _unmapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:61:29: W0212: Access to a protected member _mapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:75:19: W0212: Access to a protected member _mapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:75:8: W0612: Unused variable 'key' (unused-variable)
tests/test_data_broker.py:78:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:81:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:84:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:97:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:97:35: W0613: Unused argument 'variable' (unused-argument)
tests/test_data_broker.py:100:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:100:35: W0613: Unused argument 'variable' (unused-argument)
tests/test_data_broker.py:114:8: C0115: Missing class docstring (missing-class-docstring)
tests/test_data_broker.py:125:47: W0212: Access to a protected member _callback_config_vars of a client class (protected-access)
tests/test_data_broker.py:130:47: W0212: Access to a protected member _callback_config_vars of a client class (protected-access)
tests/test_data_broker.py:132:29: W0212: Access to a protected member _unmapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:135:47: W0212: Access to a protected member _callback_config_vars of a client class (protected-access)
tests/test_data_broker.py:137:29: W0212: Access to a protected member _unmapped_callbacks of a client class (protected-access)
tests/test_data_broker.py:85:8: W0201: Attribute 'never_reached' defined outside __init__ (attribute-defined-outside-init)
tests/test_data_broker.py:102:8: W0201: Attribute 'never_reached' defined outside __init__ (attribute-defined-outside-init)
tests/test_data_broker.py:162:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_data_broker.py:169:13: W0212: Access to a protected member _start_executing_callbacks of a client class (protected-access)
tests/test_data_broker.py:181:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_data_broker.py:202:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_data_broker.py:4:0: C0412: Imports from package unittest are not grouped (ungrouped-imports)
************* Module tests.test_simulator_dashboard
tests/test_simulator_dashboard.py:1:0: C0114: Missing module docstring (missing-module-docstring)
tests/test_simulator_dashboard.py:4:0: E0401: Unable to import 'pandas' (import-error)
tests/test_simulator_dashboard.py:5:0: E0401: Unable to import 'dash' (import-error)
tests/test_simulator_dashboard.py:15:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_simulator_dashboard.py:17:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator_dashboard.py:46:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator_dashboard.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_simulator_dashboard.py:79:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module tests.test_mas
tests/test_mas.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mas.py:17:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_mas.py:19:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module tests.test_examples
tests/test_examples.py:10:0: E0401: Unable to import 'pandas' (import-error)
tests/test_examples.py:42:12: W0719: Raising too general exception: Exception (broad-exception-raised)
tests/test_examples.py:58:8: C0415: Import outside toplevel (sys) (import-outside-toplevel)
tests/test_examples.py:73:8: C0415: Import outside toplevel (sys) (import-outside-toplevel)
************* Module tests.test_databroker_limits
tests/test_databroker_limits.py:12:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_databroker_limits.py:31:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_databroker_limits.py:45:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_databroker_limits.py:61:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_databroker_limits.py:71:8: W0719: Raising too general exception: Exception (broad-exception-raised)
tests/test_databroker_limits.py:74:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_databroker_limits.py:95:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_databroker_limits.py:110:0: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_databroker_limits.py:124:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_databroker_limits.py:125:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_databroker_limits.py:130:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_databroker_limits.py:135:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module tests.test_model
tests/test_model.py:7:0: E0401: Unable to import 'pydantic' (import-error)
tests/test_model.py:8:0: E0401: Unable to import 'numpy' (import-error)
tests/test_model.py:15:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_model.py:1:0: F0002: tests/test_model.py: Fatal error while checking 'tests/test_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-02.txt'. (astroid-error)
************* Module tests.test_utils
tests/test_utils.py:58:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_utils.py:81:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
tests/test_utils.py:81:45: C0103: Variable name "f" doesn't conform to snake_case naming style (invalid-name)
tests/test_utils.py:89:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module tests.test_datamodels
tests/test_datamodels.py:5:0: E0401: Unable to import 'numpy' (import-error)
tests/test_datamodels.py:6:0: E0401: Unable to import 'pandas' (import-error)
tests/test_datamodels.py:23:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_datamodels.py:37:12: R1735: Consider using '{"name": 'test', "value": 100.0, "type": 'float'}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:51:12: R1735: Consider using '{"name": 'test', "value": srs, "type": 'pd.Series'}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:63:16: R1735: Consider using '{"name": 'test', "type": 'not_supported'}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:66:50: R1735: Consider using '{"name": 'test', "type": float}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:72:16: R1735: Consider using '{"name": 'test', "type": 'float', "ub": 10, "lb": 0, "clip": True}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:82:12: R1735: Consider using '{"name": 'test', "type": 'float', "value": 20.0, "allowed_values": ['0', '10', 20, 30.0], ... }' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:89:12: C0103: Variable name "v" doesn't conform to snake_case naming style (invalid-name)
tests/test_datamodels.py:101:16: R1735: Consider using '{"name": 'test', "type": 'pd.Series', "value": value, "ub": 10, "lb": 5, ... }' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:183:50: R1735: Consider using '{"name": 'test', "ub": 100, "lb": 200}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:187:12: R1735: Consider using '{"name": 'test', "clip": True, "ub": 100, "lb": 0, "value": 10000}' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:191:12: R1735: Consider using '{"name": 'test', "clip": True, "ub": 100, "lb": 0, "value": -10000, ... }' instead of a call to 'dict'. (use-dict-literal)
tests/test_datamodels.py:277:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_datamodels.py:279:30: C2801: Unnecessarily calls dunder method __str__. Use str built-in function. (unnecessary-dunder-call)
************* Module tests.test_agent
tests/test_agent.py:10:0: E0401: Unable to import 'pydantic' (import-error)
tests/test_agent.py:28:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_agent.py:32:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_agent.py:42:0: C0115: Missing class docstring (missing-class-docstring)
tests/test_agent.py:55:12: W0719: Raising too general exception: Exception (broad-exception-raised)
tests/test_agent.py:58:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
tests/test_agent.py:82:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
tests/test_agent.py:86:4: C0116: Missing function or method docstring (missing-function-docstring)
tests/test_agent.py:87:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:98:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:116:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:119:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
tests/test_agent.py:131:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:134:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:142:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:155:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:172:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:176:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:187:8: C0103: Variable name "ag" doesn't conform to snake_case naming style (invalid-name)
tests/test_agent.py:182:8: W0201: Attribute '_stop_test' defined outside __init__ (attribute-defined-outside-init)
tests/test_agent.py:199:12: W0201: Attribute '_stop_test' defined outside __init__ (attribute-defined-outside-init)
tests/test_agent.py:195:12: W0201: Attribute '_still_running' defined outside __init__ (attribute-defined-outside-init)
tests/test_agent.py:208:12: W0201: Attribute '_still_running' defined outside __init__ (attribute-defined-outside-init)
************* Module tests.test_environment
tests/test_environment.py:7:0: E0401: Unable to import 'pydantic' (import-error)
tests/test_environment.py:39:8: W0212: Access to a protected member _config of a client class (protected-access)
tests/test_environment.py:40:30: E1101: Instance of 'Environment' has no 'config' member; maybe '_config'? (no-member)
tests/test_environment.py:42:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
tests/test_environment.py:44:8: W0212: Access to a protected member _config of a client class (protected-access)
tests/test_environment.py:45:30: E1101: Instance of 'Environment' has no 'config' member; maybe '_config'? (no-member)
tests/test_environment.py:52:8: E1101: Instance of 'Environment' has no 'run' member (no-member)
tests/test_environment.py:53:32: E1101: Instance of 'Environment' has no 'time' member (no-member)
tests/test_environment.py:58:30: E1101: Instance of 'Environment' has no 'config' member; maybe '_config'? (no-member)
************* Module agentlib.models.scipy_model
agentlib/models/scipy_model.py:35:0: R0022: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers. (useless-option-value)
agentlib/models/scipy_model.py:1:0: F0002: agentlib/models/scipy_model.py: Fatal error while checking 'agentlib/models/scipy_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-03.txt'. (astroid-error)
************* Module agentlib.models.fmu_model
agentlib/models/fmu_model.py:1:0: F0002: agentlib/models/fmu_model.py: Fatal error while checking 'agentlib/models/fmu_model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-03.txt'. (astroid-error)
agentlib/models/fmu_model.py:6:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
************* Module agentlib.utils.plugin_import
agentlib/utils/plugin_import.py:6:0: E0401: Unable to import 'pydantic' (import-error)
agentlib/utils/plugin_import.py:31:0: W0613: Unused argument 'kwargs' (unused-argument)
agentlib/utils/plugin_import.py:72:8: W0707: Consider explicitly re-raising using 'except AttributeError as exc' and 'raise ImportError(f"Plugin '{name}' has no dictionary called '{plugin_types_name}' to import plugin types.") from exc' (raise-missing-from)
************* Module agentlib.utils.load_config
agentlib/utils/load_config.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/utils/load_config.py:1:0: F0002: agentlib/utils/load_config.py: Fatal error while checking 'agentlib/utils/load_config.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils.local_broadcast_broker
agentlib/utils/local_broadcast_broker.py:1:0: F0002: agentlib/utils/local_broadcast_broker.py: Fatal error while checking 'agentlib/utils/local_broadcast_broker.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils.validators
agentlib/utils/validators.py:1:0: F0002: agentlib/utils/validators.py: Fatal error while checking 'agentlib/utils/validators.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils.local_broker
agentlib/utils/local_broker.py:1:0: F0002: agentlib/utils/local_broker.py: Fatal error while checking 'agentlib/utils/local_broker.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils.fuzzy_matching
agentlib/utils/fuzzy_matching.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/utils/fuzzy_matching.py:1:0: F0002: agentlib/utils/fuzzy_matching.py: Fatal error while checking 'agentlib/utils/fuzzy_matching.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils.multi_processing_broker
agentlib/utils/multi_processing_broker.py:1:0: F0002: agentlib/utils/multi_processing_broker.py: Fatal error while checking 'agentlib/utils/multi_processing_broker.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-04.txt'. (astroid-error)
************* Module agentlib.utils
agentlib/utils/__init__.py:85:8: W0707: Consider explicitly re-raising using 'except KeyError as exc' and 'raise ImportError(f"Given module '{custom_module}' does not contain the specified class {class_name}") from exc' (raise-missing-from)
agentlib/utils/multi_processing_broker.py:6:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib/utils/__init__.py:12:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
************* Module agentlib.utils.multi_agent_system
agentlib/utils/multi_agent_system.py:219:0: C0301: Line too long (107/100) (line-too-long)
agentlib/utils/multi_agent_system.py:1:0: F0002: agentlib/utils/multi_agent_system.py: Fatal error while checking 'agentlib/utils/multi_agent_system.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-05.txt'. (astroid-error)
************* Module agentlib.utils.plotting.simulator_dashboard
agentlib/utils/plotting/simulator_dashboard.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/utils/plotting/simulator_dashboard.py:1:0: F0002: agentlib/utils/plotting/simulator_dashboard.py: Fatal error while checking 'agentlib/utils/plotting/simulator_dashboard.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-05.txt'. (astroid-error)
agentlib/utils/plotting/simulator_dashboard.py:5:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
************* Module agentlib.core.data_broker
agentlib/core/data_broker.py:1:0: F0002: agentlib/core/data_broker.py: Fatal error while checking 'agentlib/core/data_broker.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-05.txt'. (astroid-error)
************* Module agentlib.core.agent
agentlib/core/agent.py:1:0: F0002: agentlib/core/agent.py: Fatal error while checking 'agentlib/core/agent.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-05.txt'. (astroid-error)
************* Module agentlib.core.module
agentlib/core/module.py:1:0: F0002: agentlib/core/module.py: Fatal error while checking 'agentlib/core/module.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-05.txt'. (astroid-error)
************* Module agentlib.core.logging_
agentlib/core/logging_.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/core/logging_.py:1:0: F0002: agentlib/core/logging_.py: Fatal error while checking 'agentlib/core/logging_.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-06.txt'. (astroid-error)
************* Module agentlib.core.environment
agentlib/core/environment.py:1:0: F0002: agentlib/core/environment.py: Fatal error while checking 'agentlib/core/environment.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-06.txt'. (astroid-error)
************* Module agentlib.core.datamodels
agentlib/core/datamodels.py:1:0: F0002: agentlib/core/datamodels.py: Fatal error while checking 'agentlib/core/datamodels.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-06.txt'. (astroid-error)
************* Module agentlib.core.model
agentlib/core/model.py:87:0: C0301: Line too long (106/100) (line-too-long)
agentlib/core/model.py:254:0: C0301: Line too long (118/100) (line-too-long)
agentlib/core/model.py:1:0: F0002: agentlib/core/model.py: Fatal error while checking 'agentlib/core/model.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-07.txt'. (astroid-error)
agentlib/core/agent.py:6:0: C0412: Imports from package threading are not grouped (ungrouped-imports)
agentlib/core/module.py:5:0: C0412: Imports from package abc are not grouped (ungrouped-imports)
agentlib/core/module.py:6:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib/core/module.py:7:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib/core/logging_.py:1:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib/core/environment.py:28:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib/core/environment.py:31:0: C0412: Imports from package pathlib are not grouped (ungrouped-imports)
agentlib/core/datamodels.py:6:0: C0412: Imports from package abc are not grouped (ungrouped-imports)
agentlib/core/datamodels.py:8:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib/core/datamodels.py:9:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib/core/datamodels.py:12:0: C0412: Imports from package copy are not grouped (ungrouped-imports)
agentlib/core/model.py:3:0: C0412: Imports from package abc are not grouped (ungrouped-imports)
agentlib/core/model.py:5:0: C0412: Imports from package json are not grouped (ungrouped-imports)
agentlib/core/model.py:6:0: C0412: Imports from package logging are not grouped (ungrouped-imports)
agentlib/core/model.py:7:0: C0412: Imports from package copy are not grouped (ungrouped-imports)
agentlib/core/model.py:8:0: C0412: Imports from package itertools are not grouped (ungrouped-imports)
************* Module agentlib.modules.__init__
agentlib/modules/__init__.py:1:0: F0002: agentlib/modules/__init__.py: Fatal error while checking 'agentlib/modules/__init__.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-07.txt'. (astroid-error)
************* Module agentlib.modules.utils.try_sensor
agentlib/modules/utils/try_sensor.py:1:0: F0002: agentlib/modules/utils/try_sensor.py: Fatal error while checking 'agentlib/modules/utils/try_sensor.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-07.txt'. (astroid-error)
************* Module agentlib.modules.utils.agent_logger
agentlib/modules/utils/agent_logger.py:57:0: R0022: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers. (useless-option-value)
agentlib/modules/utils/agent_logger.py:45:0: C0301: Line too long (106/100) (line-too-long)
agentlib/modules/utils/agent_logger.py:50:0: C0301: Line too long (111/100) (line-too-long)
agentlib/modules/utils/agent_logger.py:1:0: F0002: agentlib/modules/utils/agent_logger.py: Fatal error while checking 'agentlib/modules/utils/agent_logger.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-07.txt'. (astroid-error)
************* Module agentlib.modules.communicator.local_broadcast
agentlib/modules/communicator/local_broadcast.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module agentlib.modules.communicator.local
agentlib/modules/communicator/local.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/communicator/local.py:11:0: C0115: Missing class docstring (missing-class-docstring)
agentlib/modules/communicator/local.py:33:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module agentlib.modules.communicator.clonemap
agentlib/modules/communicator/clonemap.py:1:0: F0002: agentlib/modules/communicator/clonemap.py: Fatal error while checking 'agentlib/modules/communicator/clonemap.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-07.txt'. (astroid-error)
************* Module agentlib.modules.communicator.local_multiprocessing
agentlib/modules/communicator/local_multiprocessing.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/communicator/local_multiprocessing.py:5:0: E0401: Unable to import 'pydantic' (import-error)
agentlib/modules/communicator/local_multiprocessing.py:18:0: C0115: Missing class docstring (missing-class-docstring)
agentlib/modules/communicator/local_multiprocessing.py:50:16: E1101: Instance of 'BrokerManager' has no 'connect' member (no-member)
agentlib/modules/communicator/local_multiprocessing.py:57:23: E1101: Instance of 'BrokerManager' has no 'get_queue' member (no-member)
agentlib/modules/communicator/local_multiprocessing.py:91:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
agentlib/modules/communicator/local_multiprocessing.py:6:0: C0411: standard import "from ipaddress import IPv4Address" should be placed before "from pydantic import Field" (wrong-import-order)
************* Module agentlib.modules.communicator.mqtt
agentlib/modules/communicator/mqtt.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/communicator/mqtt.py:1:0: F0002: agentlib/modules/communicator/mqtt.py: Fatal error while checking 'agentlib/modules/communicator/mqtt.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-08.txt'. (astroid-error)
************* Module agentlib.modules.simulation.csv_data_source
agentlib/modules/simulation/csv_data_source.py:182:0: C0301: Line too long (108/100) (line-too-long)
agentlib/modules/simulation/csv_data_source.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/simulation/csv_data_source.py:1:0: F0002: agentlib/modules/simulation/csv_data_source.py: Fatal error while checking 'agentlib/modules/simulation/csv_data_source.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-08.txt'. (astroid-error)
************* Module agentlib.modules.simulation
agentlib/modules/simulation/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module agentlib.modules.controller.bangbang
agentlib/modules/controller/bangbang.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/controller/bangbang.py:1:0: E0401: Unable to import 'pydantic' (import-error)
agentlib/modules/controller/bangbang.py:48:4: R1710: Either all return statements in a function should return an expression, or none of them should. (inconsistent-return-statements)
************* Module agentlib.modules.controller.controller
agentlib/modules/controller/controller.py:1:0: F0002: agentlib/modules/controller/controller.py: Fatal error while checking 'agentlib/modules/controller/controller.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-08.txt'. (astroid-error)
************* Module agentlib.modules.controller
agentlib/modules/controller/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module agentlib.modules.controller.pid
agentlib/modules/controller/pid.py:1:0: C0114: Missing module docstring (missing-module-docstring)
agentlib/modules/controller/pid.py:1:0: F0002: agentlib/modules/controller/pid.py: Fatal error while checking 'agentlib/modules/controller/pid.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/home/runner/.cache/pylint/pylint-crash-2025-10-30-13-31-08.txt'. (astroid-error)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[43:99]
==examples.controller.pid_with_simulator:[56:112]
            "input": {"name": "u", "value": 0, "alias": "room_temp"},
            "output": {
                "name": "y",
                "value": 0,
                "alias": "heating_power",
                "shared": True,
            },
        },
        {"module_id": "myLogger", "type": "AgentLogger"},
        {"module_id": "myComm", "type": "local", "subscriptions": ["Process"]},
    ],
}

process_agent_config = {
    "id": "Process",
    "modules": [
        {
            "module_id": "sim",
            "type": "simulator",
            "model": {"type": {"file": __file__, "class_name": "HeatedRoom"}},
            "t_sample": 10,
            "inputs": [
                {"name": "heating_power_in_watt", "value": 0, "alias": "heating_power"}
            ],
            "states": [
                {
                    "name": "temperature_in_celsius",
                    "value": 21,
                    "shared": True,
                    "alias": "room_temp",
                }
            ],
        },
        {"module_id": "myLogger", "type": "AgentLogger"},
        {"module_id": "myComm", "type": "local", "subscriptions": ["PID"]},
    ],
}


def run_example(with_plots=True, log_level=logging.INFO):
    # Set the log-level
    logging.basicConfig(level=log_level)

    env_config = {"rt": False, "factor": 0.01, "clock": True, "t_sample": 60}
    env = ag.Environment(config=env_config)
    pid_agent = ag.Agent(config=pid_agent_config, env=env)
    process_agent = ag.Agent(config=process_agent_config, env=env)
    env.run(until=1000)

    results = process_agent.get_results()
    res = results["myLogger"]
    if with_plots:
        import matplotlib.pyplot as plt

        fig, ax = plt.subplots(2, 1)
        res["room_temp"].plot(ax=ax[0], label="$T_{room}$") (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_concise:[9:57]
==part_3_using_models_with_comments:[27:97]
import logging
from typing import List

import agentlib as ag


class HeatedRoomConfig(ag.ModelConfig):
    inputs: List[ag.ModelInput] = [
        ag.ModelInput(name="heating_power_in_watt", value=100)
    ]
    states: List[ag.ModelState] = [
        ag.ModelState(name="temperature_in_celsius", value=20)
    ]
    parameters: List[ag.ModelParameter] = [
        ag.ModelParameter(name="heat_loss_in_watt", value=150),
        ag.ModelParameter(name="thermal_capacity_zone", value=100_000),
    ]
    outputs: List[ag.ModelOutput] = []


class HeatedRoom(ag.Model):
    config: HeatedRoomConfig

    def initialize(self, **kwargs):
        pass

    def do_step(self, *, t_start, t_sample):
        t = self.get("temperature_in_celsius").value  # get/set also works in models
        power = self.get("heating_power_in_watt").value
        loss = self.get("heat_loss_in_watt").value
        capacity = self.get("thermal_capacity_zone").value
        t = t + ((power - loss) / capacity) * t_sample
        self.set("temperature_in_celsius", t)


agent_config = {
    "id": "my_agent_id",
    "modules": [
        {
            "module_id": "sim",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "HeatedRoom"},
            },
            "t_sample": 10,
            "save_results": True,
            "result_filename": "results_part3.csv",
            "result_causalities": ["local"], (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[0:38]
==examples.controller.pid_with_simulator:[11:49]
import logging
from typing import List

import agentlib as ag


class HeatedRoomConfig(ag.ModelConfig):
    inputs: List[ag.ModelInput] = [
        ag.ModelInput(name="heating_power_in_watt", value=100)
    ]
    states: List[ag.ModelState] = [
        ag.ModelState(name="temperature_in_celsius", value=20)
    ]
    parameters: List[ag.ModelParameter] = [
        ag.ModelParameter(name="heat_loss_in_watt", value=150),
        ag.ModelParameter(name="thermal_capacity_zone", value=100_000),
    ]


class HeatedRoom(ag.Model):
    config: HeatedRoomConfig

    def initialize(self, **kwargs):
        pass

    def do_step(self, *, t_start, t_sample):
        t = self.get("temperature_in_celsius").value
        power = self.get("heating_power_in_watt").value
        loss = self.get("heat_loss_in_watt").value
        capacity = self.get("thermal_capacity_zone").value
        t = t + ((power - loss) / capacity) * t_sample
        self.set("temperature_in_celsius", t)


pid_agent_config = {
    "id": "PID",
    "modules": [
        { (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_2_agentvariables_concise:[10:45]
==part_2_agentvariables_with_comments:[10:72]
import logging

import agentlib as ag


class MyModuleConfig(ag.BaseModuleConfig):
    increment: float = 0.5
    my_number: ag.AgentVariable


class MyModule(ag.BaseModule):
    config: MyModuleConfig

    def process(self):
        name_of_my_number = self.config.my_number.name
        while True:
            my_number = self.get(name_of_my_number)
            new_value = my_number.value + self.config.increment
            self.logger.info(
                f"I will change the value of '{name_of_my_number}' from {my_number.value} to {new_value}."
            )
            self.set(name_of_my_number, new_value)
            yield self.env.timeout(1)

    def register_callbacks(self):
        pass


agent_config = {
    "id": "my_agent_id",
    "modules": [
        {
            "type": {"file": __file__, "class_name": "MyModule"},
            "my_number": {"name": "greg", "value": 5},
        }, (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_with_comments:[27:64]
==part_4_communicators_with_comments:[10:48]
import logging
from typing import List

import agentlib as ag


# define the inputs, outputs, states and parameters of your model
class HeatedRoomConfig(ag.ModelConfig):
    inputs: List[ag.ModelInput] = [
        ag.ModelInput(name="heating_power_in_watt", value=100)
    ]
    states: List[ag.ModelState] = [
        ag.ModelState(name="temperature_in_celsius", value=20)
    ]
    parameters: List[ag.ModelParameter] = [
        ag.ModelParameter(name="heat_loss_in_watt", value=150),
        ag.ModelParameter(name="thermal_capacity_zone", value=100_000),
    ]
    outputs: List[ag.ModelOutput] = []


class HeatedRoom(ag.Model):
    config: HeatedRoomConfig  # match the config to the model

    def initialize(self, **kwargs):
        pass

    # define a discrete simulation step
    def do_step(self, *, t_start, t_sample):
        t = self.get("temperature_in_celsius").value  # get/set also works in models
        power = self.get("heating_power_in_watt").value
        loss = self.get("heat_loss_in_watt").value
        capacity = self.get("thermal_capacity_zone").value
        t = t + ((power - loss) / capacity) * t_sample
        self.set("temperature_in_celsius", t)

 (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_1_my_first_agent_concise:[25:54]
==part_1_my_first_agent_with_comments:[29:91]
        while True:
            # we can access the attributes from the config we defined above like this
            self.logger.info(f"I am {self.config.name} with age {self.config.age}.")
            yield self.env.timeout(1)  # timeout is in seconds

    def register_callbacks(self):
        # we will learn about callbacks later
        pass


# the config of an agent can be a python dict or a JSON-file
# the config has two keys: id and modules
agent_config = {
    # the id is the public name of the agent. It will become later, when using
    # communicators. It is also displayed in log messages.
    "id": "my_agent_id",
    # second comes a list of modules, which define the function of the agent. Usually,
    # an agent has a communicator and a functional module, but in fact, any
    # combination of modules is possible.
    # In this example, there is no communication with other agents, so we only have one
    # module
    "modules": [
        {
            # the type key defines the class of a module and is always required
            # There are two ways to specify the type
            #   1. Use a module from the core, or a plugin. You only need to write down
            #   the string-key which maps to it.
            #   2. Use a custom module. Under type, write down a dict, pointing to the
            #   exact python class you want to execute.
            # In our example, we use option two, to load the module defined above.
            "type": {"file": __file__, "class_name": "MyFirstModule"},
            # on the same level as type, the remaining configuration of the module has
            # to be done. For our module defined above, we defined a 'name' field which
            # we now have to specify
            "name": "first_agent",
        }
    ],
}


def main():
    # We have to make sure, our log level is set to INFO, otherwise, our process
    # defined above will not print anything
    logging.basicConfig(level=logging.INFO)

    # every agent runs in an environment. The environment has four keys:
    # 1. 'rt': If True, the code will run in realtime
    # 2. 'factor': Speed up realtime if <1, slow down if >1. Ignored if 'rt' is False
    # 3. 'clock': If True, periodically print the current simulation time
    # 4. 't_sample': Intervall for the clock. 3 and 4 only affect logs, not results
    environment_config = {"rt": False, "factor": 1, "clock": False, "t_sample": 60}
    env = ag.Environment(config=environment_config)

    # create the agent. Multiple agents can be created with the same environment.
    agent = ag.Agent(config=agent_config, env=env)

    # runs the environment for 10 seconds, starting the agent
    env.run(10)


if __name__ == "__main__":
    main() (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_concise:[59:84]
==part_3_using_models_with_comments:[103:139]
        },
    ],
}


def main(with_plots: bool = True):
    logging.basicConfig(level=logging.INFO)

    environment_config = {"rt": False, "factor": 1, "clock": False}
    # we use the LocalMASAgency class to start our agent
    # It can be passed a list of agent configs, and an environment config and will run
    # all agents in this environment
    mas = ag.LocalMASAgency(agent_configs=[agent_config], env=environment_config)

    # the run command now is part of the mas
    mas.run(1800)

    if with_plots:
        import matplotlib.pyplot as plt
        import pandas as pd

        # there is also a results function for the MAS, we can get agents with their id
        results = mas.get_results()["my_agent_id"]

        # key here is the module_id of the simulator
        logger_results: pd.DataFrame = results["sim"]

        # key is name of the variable (it's actually the alias, more on this later!)
        logger_results["temperature_in_celsius"].plot()
        plt.ylabel("Temperature / °C")
        plt.xlabel("Time / sec")
        plt.show()


if __name__ == "__main__":
    main() (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_2_agentvariables_concise:[46:74]
==part_2_agentvariables_with_comments:[85:120]
    ],
}


def main(with_plots: bool = True):
    logging.basicConfig(level=logging.INFO)

    environment_config = {"rt": False, "factor": 1, "clock": False}
    env = ag.Environment(config=environment_config)
    agent = ag.Agent(config=agent_config, env=env)
    env.run(10)

    if with_plots:
        import matplotlib.pyplot as plt
        import pandas as pd

        results = agent.get_results()

        # key here is the module_id of the agentlogger
        logger_results: pd.DataFrame = results["my_logger"]

        # key is name of the variable (it's actually the alias, more on this later!)
        logger_results["greg"].plot()
        plt.show()


if __name__ == "__main__":
    main()

    # play around with this example!
    # 1. Change the name of the AgentVariable
    # 2. Change the increment

    # Why do we use an AgentVariable? The Module is a normal Python class after all,
    # can I not just assign a normal instance variable, like so? (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.pid_with_simulator:[11:30]
==part_3_using_models_with_comments:[27:45]
import logging
from typing import List

import agentlib as ag


class HeatedRoomConfig(ag.ModelConfig):
    inputs: List[ag.ModelInput] = [
        ag.ModelInput(name="heating_power_in_watt", value=100)
    ]
    states: List[ag.ModelState] = [
        ag.ModelState(name="temperature_in_celsius", value=20)
    ]
    parameters: List[ag.ModelParameter] = [
        ag.ModelParameter(name="heat_loss_in_watt", value=150),
        ag.ModelParameter(name="thermal_capacity_zone", value=100_000),
    ]

 (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[0:19]
==part_4_communicators_with_comments:[10:28]
import logging
from typing import List

import agentlib as ag


# the model is the same as in example three
class HeatedRoomConfig(ag.ModelConfig):
    inputs: List[ag.ModelInput] = [
        ag.ModelInput(name="heating_power_in_watt", value=100)
    ]
    states: List[ag.ModelState] = [
        ag.ModelState(name="temperature_in_celsius", value=20)
    ]
    parameters: List[ag.ModelParameter] = [
        ag.ModelParameter(name="heat_loss_in_watt", value=150),
        ag.ModelParameter(name="thermal_capacity_zone", value=100_000),
    ] (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_with_comments:[118:139]
==part_4_communicators_with_comments:[141:157]
    mas.run(1800)

    if with_plots:
        import matplotlib.pyplot as plt
        import pandas as pd

        # there is also a results function for the MAS, we can get agents with their id
        results = mas.get_results()["my_agent_id"]

        # key here is the module_id of the simulator
        logger_results: pd.DataFrame = results["sim"]

        # key is name of the variable (it's actually the alias, more on this later!)
        logger_results["temperature_in_celsius"].plot()
        plt.ylabel("Temperature / °C")
        plt.xlabel("Time / sec")
        plt.show()


if __name__ == "__main__":
    main() (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_with_comments:[66:98]
==part_4_communicators_with_comments:[50:72]
    "modules": [
        {
            "module_id": "sim",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "HeatedRoom"},
            },
            "t_sample": 10,
            "save_results": True,
            "result_filename": "results_part3.csv",
            "result_causalities": ["local"],
            "inputs": [
                # notice that we now included an alias in the declaration of the
                # heating power. The alias is the public name of a variable, which is
                # used for communication. The name is important for the
                # internal workings of a module. In this case, the alias has to match
                # with the other agent for communication, while the name has to match
                # with our model implementation.
                # If you do not declare an alias, it will be set to the name. You will
                # see many examples, where this is the case. However it is often useful
                # to be explicit about the alias, to better understand the
                # communication structure of a an agent system (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.pid_with_simulator:[45:56]
==part_4_communicators_with_comments:[95:114]
pid_agent_config = {
    "id": "PID",
    "modules": [
        {
            "module_id": "myPid",
            "type": "pid",
            "setpoint": 21,
            "Kp": 1000,
            "Ti": 10,
            "lb": 0,
            "ub": 500, (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_3_using_models_concise:[46:57]
==part_4_communicators_with_comments:[50:61]
    "modules": [
        {
            "module_id": "sim",
            "type": "simulator",
            "model": {
                "type": {"file": __file__, "class_name": "HeatedRoom"},
            },
            "t_sample": 10,
            "save_results": True,
            "result_filename": "results_part3.csv",
            "result_causalities": ["local"], (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.multi-agent-systems.pingpong.pingpong_local_broadcast:[22:32]
==examples.multi-agent-systems.pingpong.pingpong_mqtt:[18:28]
        {
            "module_id": "Ping",
            "type": {"file": pingpong_module.__file__, "class_name": "PingPong"},
            "start": True,
        },
    ],
}
agent_config2 = {
    "id": "SecondAgent",
    "modules": [ (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.pid_with_simulator:[30:45]
==part_3_using_models_with_comments:[48:64]
class HeatedRoom(ag.Model):
    config: HeatedRoomConfig

    def initialize(self, **kwargs):
        pass

    def do_step(self, *, t_start, t_sample):
        t = self.get("temperature_in_celsius").value
        power = self.get("heating_power_in_watt").value
        loss = self.get("heat_loss_in_watt").value
        capacity = self.get("thermal_capacity_zone").value
        t = t + ((power - loss) / capacity) * t_sample
        self.set("temperature_in_celsius", t)

 (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[19:34]
==part_4_communicators_with_comments:[31:48]
class HeatedRoom(ag.Model):
    config: HeatedRoomConfig

    def initialize(self, **kwargs):
        pass

    def do_step(self, *, t_start, t_sample):
        t = self.get("temperature_in_celsius").value
        power = self.get("heating_power_in_watt").value
        loss = self.get("heat_loss_in_watt").value
        capacity = self.get("thermal_capacity_zone").value
        t = t + ((power - loss) / capacity) * t_sample
        self.set("temperature_in_celsius", t)

 (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.multi-agent-systems.pingpong.pingpong_local:[25:37]
==examples.multi-agent-systems.pingpong.pingpong_mqtt:[34:46]
        {
            "module_id": "Pong",
            "type": {"file": pingpong_module.__file__, "class_name": "PingPong"},
        },
    ],
}


if __name__ == "__main__":
    # Add configs to LocalMAS Agency
    MAS = LocalMASAgency(agent_configs=[agent_config1, agent_config2], env=env_config)
    MAS.run(until=None) (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[102:111]
==examples.controller.pid_with_simulator:[113:122]
        res["heating_power"].plot(ax=ax[1], label="$\dot{Q}_{heat}$")
        ax[0].legend()
        ax[1].legend()
        plt.show()
    return {"PID_1": results}


if __name__ == "__main__":
    run_example(log_level="INFO") (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==tests.test_agent:[225:233]
==tests.test_environment:[61:69]
        try:
            os.remove(self.filepath)
        except FileNotFoundError:
            pass


if __name__ == "__main__":
    unittest.main() (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==tests.test_communicator:[12:18]
==tests.test_module:[27:33]
    "allowed_values": [100, 150],
    "shared": True,
    "unit": "testUnit",
    "description": "My Doc",
    "clip": True,
    "rdf_class": "MyRDFClass", (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.controller.bangbang_with_simulator:[56:62]
==part_4_communicators_with_comments:[48:54]
process_agent_config = {
    "id": "Process",
    "modules": [
        {
            "module_id": "sim",
            "type": "simulator", (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_1_my_first_agent_concise:[27:37]
==part_2_agentvariables_concise:[32:42]
            yield self.env.timeout(1)

    def register_callbacks(self):
        pass


agent_config = {
    "id": "my_agent_id",
    "modules": [
        { (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_1_my_first_agent_with_comments:[32:59]
==part_2_agentvariables_with_comments:[52:62]
            yield self.env.timeout(1)  # timeout is in seconds

    def register_callbacks(self):
        # we will learn about callbacks later
        pass


# the config of an agent can be a python dict or a JSON-file
# the config has two keys: id and modules
agent_config = {
    # the id is the public name of the agent. It will become later, when using
    # communicators. It is also displayed in log messages.
    "id": "my_agent_id",
    # second comes a list of modules, which define the function of the agent. Usually,
    # an agent has a communicator and a functional module, but in fact, any
    # combination of modules is possible.
    # In this example, there is no communication with other agents, so we only have one
    # module
    "modules": [
        {
            # the type key defines the class of a module and is always required
            # There are two ways to specify the type
            #   1. Use a module from the core, or a plugin. You only need to write down
            #   the string-key which maps to it.
            #   2. Use a custom module. Under type, write down a dict, pointing to the
            #   exact python class you want to execute.
            # In our example, we use option two, to load the module defined above. (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==part_1_my_first_agent_concise:[11:22]
==part_1_my_first_agent_with_comments:[11:23]
import logging

import agentlib as ag


class MyFirstModuleConfig(ag.BaseModuleConfig):
    name: str
    age: int = 2


class MyFirstModule(ag.BaseModule): (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.multi-agent-systems.pingpong.pingpong_mqtt:[5:12]
==examples.multi-agent-systems.pingpong.pingpong_multiprocessing:[15:23]
logging.basicConfig(level="DEBUG")
logger = logging.getLogger(__name__)

env_config = {"rt": True, "factor": 1}
agent_config1 = {
    "id": "FirstAgent",
    "modules": [ (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==tests.test_agentlogger:[23:31]
==tests.test_simulator:[60:68]
        env_config = {"rt": False, "factor": 1}
        agent_config = {"id": "TestAgent", "modules": []}
        env = Environment(config=env_config)
        return Agent(env=env, config=agent_config)

    def _get_module_cfg(self, **kwargs):
        """Dynamically build config to avoid duplicate code:"""
        return { (duplicate-code)
agentlib/modules/controller/pid.py:1:0: R0801: Similar lines in 2 files
==examples.multi-agent-systems.pingpong.pingpong_local:[0:7]
==examples.multi-agent-systems.pingpong.pingpong_mqtt:[0:8]
import logging
import pingpong_module
from agentlib.utils.multi_agent_system import LocalMASAgency


logging.basicConfig(level="DEBUG")
logger = logging.getLogger(__name__)
 (duplicate-code)

-----------------------------------
Your code has been rated at 6.87/10

